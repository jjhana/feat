package org.purl.net.jh.nbutil;

import java.awt.event.ActionListener;
import java.io.File;
import org.openide.filesystems.FileChooserBuilder;
import org.purl.net.jh.nbutil.visual.SceneExporter;

/**
 * Panel for choosing options for exporting visual library canvas.
 * @author Jirka dot Hana at gmail dot com
 */
public class ExportImgPanel extends javax.swing.JPanel {
    private final static org.purl.jh.util.Logger log = org.purl.jh.util.Logger.getLogger(ExportImgPanel.class);
    private final static java.util.ResourceBundle bundle = org.openide.util.NbBundle.getBundle(ExportImgPanel.class);
    private String file;


    /** Creates new form ExportImgPanel */
    public ExportImgPanel() {
        initComponents();

        // read all radios when one of them changes
        final ActionListener radioListener =  new java.awt.event.ActionListener() {
            @Override public void actionPerformed(java.awt.event.ActionEvent evt) {
                wLabel.setEnabled(zoomCustomRadio.isSelected());
                wFld.setEnabled(zoomCustomRadio.isSelected());
                hLabel.setEnabled(zoomCustomRadio.isSelected());
                hFld.setEnabled(zoomCustomRadio.isSelected());
            }
        };
        
        zoomCurrentRadio.addActionListener(radioListener);
        zoomCustomRadio.addActionListener(radioListener);
        zoomActualRadio.addActionListener(radioListener);
        zoomVisibleRadio.addActionListener(radioListener);

        imgTypePngRadio.doClick();      // todo remember last one
        zoomActualRadio.doClick();
        addEndingCheck.setSelected(true);
    }

    // todo some validation
    public String getFile() {
        return fileNameFld.getText();
    }

    public SceneExporter.ImageType getImageType() {
        return imgTypePngRadio.isSelected() ? SceneExporter.ImageType.PNG : SceneExporter.ImageType.JPG;
    }
    
    public boolean getAddEnding() {
        return addEndingCheck.isSelected();
    }
    
    public boolean getVisibleOnly() {
        return zoomVisibleRadio.isSelected();
    }

    public SceneExporter.ZoomType getZoomLevel() {
        if (zoomCurrentRadio.isSelected()) {
            return SceneExporter.ZoomType.CURRENT_ZOOM_LEVEL;
        }
        else if (zoomCustomRadio.isSelected()) {
            return SceneExporter.ZoomType.CUSTOM_SIZE;
        }
        return SceneExporter.ZoomType.ACTUAL_SIZE;
    }

    public int getH() {
        return (zoomCustomRadio.isSelected()) ? Integer.valueOf(hFld.getText()) : 0;
    }

    public int getW() {
        return (zoomCustomRadio.isSelected()) ? Integer.valueOf(wFld.getText()) : 0;
    }


    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        zoomGroup = new javax.swing.ButtonGroup();
        imgTypeGroup = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        fileNameFld = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        zoomCurrentRadio = new javax.swing.JRadioButton();
        zoomActualRadio = new javax.swing.JRadioButton();
        zoomVisibleRadio = new javax.swing.JRadioButton();
        zoomCustomRadio = new javax.swing.JRadioButton();
        wLabel = new javax.swing.JLabel();
        wFld = new javax.swing.JTextField();
        hLabel = new javax.swing.JLabel();
        hFld = new javax.swing.JTextField();
        imgTypeLabel = new javax.swing.JLabel();
        imgTypeJpgRadio = new javax.swing.JRadioButton();
        imgTypePngRadio = new javax.swing.JRadioButton();
        addEndingCheck = new javax.swing.JCheckBox();

        jLabel1.setDisplayedMnemonic('F');
        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.jLabel1.text")); // NOI18N

        fileNameFld.setText(org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.fileNameFld.text")); // NOI18N
        fileNameFld.setFocusAccelerator('f');

        browseButton.setMnemonic('.');
        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.browseButton.text")); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.jLabel2.text")); // NOI18N

        zoomGroup.add(zoomCurrentRadio);
        zoomCurrentRadio.setMnemonic('C');
        org.openide.awt.Mnemonics.setLocalizedText(zoomCurrentRadio, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.zoomCurrentRadio.text")); // NOI18N

        zoomGroup.add(zoomActualRadio);
        zoomActualRadio.setMnemonic('A');
        org.openide.awt.Mnemonics.setLocalizedText(zoomActualRadio, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.zoomActualRadio.text")); // NOI18N
        zoomActualRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomActualRadioActionPerformed(evt);
            }
        });

        zoomGroup.add(zoomVisibleRadio);
        zoomVisibleRadio.setMnemonic('O');
        org.openide.awt.Mnemonics.setLocalizedText(zoomVisibleRadio, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.zoomVisibleRadio.text")); // NOI18N
        zoomVisibleRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomVisibleRadioActionPerformed(evt);
            }
        });

        zoomGroup.add(zoomCustomRadio);
        zoomCustomRadio.setMnemonic('u');
        org.openide.awt.Mnemonics.setLocalizedText(zoomCustomRadio, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.zoomCustomRadio.text")); // NOI18N
        zoomCustomRadio.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomCustomRadioStateChanged(evt);
            }
        });
        zoomCustomRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomCustomRadioActionPerformed(evt);
                zoomCustomRadioActionPerformed1(evt);
            }
        });

        wLabel.setDisplayedMnemonic('w');
        org.openide.awt.Mnemonics.setLocalizedText(wLabel, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.wLabel.text")); // NOI18N

        wFld.setText(org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.wFld.text")); // NOI18N
        wFld.setFocusAccelerator('w');

        hLabel.setDisplayedMnemonic('h');
        org.openide.awt.Mnemonics.setLocalizedText(hLabel, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.hLabel.text")); // NOI18N

        hFld.setText(org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.hFld.text")); // NOI18N
        hFld.setFocusAccelerator('h');

        org.openide.awt.Mnemonics.setLocalizedText(imgTypeLabel, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.imgTypeLabel.text")); // NOI18N

        imgTypeGroup.add(imgTypeJpgRadio);
        org.openide.awt.Mnemonics.setLocalizedText(imgTypeJpgRadio, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.imgTypeJpgRadio.text")); // NOI18N

        imgTypeGroup.add(imgTypePngRadio);
        org.openide.awt.Mnemonics.setLocalizedText(imgTypePngRadio, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.imgTypePngRadio.text")); // NOI18N
        imgTypePngRadio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                imgTypePngRadioActionPerformed(evt);
            }
        });

        org.openide.awt.Mnemonics.setLocalizedText(addEndingCheck, org.openide.util.NbBundle.getMessage(ExportImgPanel.class, "ExportImgPanel.addEndingCheck.text")); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 122, Short.MAX_VALUE)
                    .addComponent(imgTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(zoomActualRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(imgTypePngRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zoomCustomRadio, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(imgTypeJpgRadio, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(wLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(wFld, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(zoomCurrentRadio, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(24, 24, 24)
                                .addComponent(hLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hFld, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(zoomVisibleRadio)
                            .addComponent(addEndingCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fileNameFld, javax.swing.GroupLayout.DEFAULT_SIZE, 747, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(15, 15, 15))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {hFld, wFld});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(fileNameFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imgTypePngRadio)
                    .addComponent(imgTypeJpgRadio)
                    .addComponent(imgTypeLabel)
                    .addComponent(addEndingCheck))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(zoomActualRadio))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(zoomCurrentRadio)
                        .addComponent(zoomVisibleRadio)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(zoomCustomRadio)
                        .addComponent(wLabel)
                        .addComponent(wFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(hLabel)
                        .addComponent(hFld, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(16, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
      //The default dir to use if no value is stored
      File defFile = new File( fileNameFld.getText().isEmpty() ? System.getProperty("user.home") : fileNameFld.getText() );
      //Now build a file chooser and invoke the dialog in one line of code
      //"libraries-dir" is our unique key
      File tmp = new FileChooserBuilder("save-export-img")
              .setTitle(bundle.getString("exportImgPanel.title"))
              .setDefaultWorkingDirectory(defFile)
              .setApproveText("exportImgPanel.button")
              .showSaveDialog();
      if (tmp != null) {
          fileNameFld.setText(tmp.getAbsolutePath());
      }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void zoomActualRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomActualRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zoomActualRadioActionPerformed

    private void zoomVisibleRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomVisibleRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zoomVisibleRadioActionPerformed

    private void zoomCustomRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomCustomRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_zoomCustomRadioActionPerformed

    private void zoomCustomRadioStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomCustomRadioStateChanged
    }//GEN-LAST:event_zoomCustomRadioStateChanged

    private void zoomCustomRadioActionPerformed1(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomCustomRadioActionPerformed1
    }//GEN-LAST:event_zoomCustomRadioActionPerformed1

    private void imgTypePngRadioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_imgTypePngRadioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_imgTypePngRadioActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox addEndingCheck;
    private javax.swing.JButton browseButton;
    private javax.swing.JTextField fileNameFld;
    private javax.swing.JTextField hFld;
    private javax.swing.JLabel hLabel;
    private javax.swing.ButtonGroup imgTypeGroup;
    private javax.swing.JRadioButton imgTypeJpgRadio;
    private javax.swing.JLabel imgTypeLabel;
    private javax.swing.JRadioButton imgTypePngRadio;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField wFld;
    private javax.swing.JLabel wLabel;
    private javax.swing.JRadioButton zoomActualRadio;
    private javax.swing.JRadioButton zoomCurrentRadio;
    private javax.swing.JRadioButton zoomCustomRadio;
    private javax.swing.ButtonGroup zoomGroup;
    private javax.swing.JRadioButton zoomVisibleRadio;
    // End of variables declaration//GEN-END:variables

}
