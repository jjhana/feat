package org.purl.net.jh.nb.html;


import java.awt.Font;
import javax.swing.JTextPane;
import javax.swing.text.MutableAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import javax.swing.text.html.HTMLDocument;
import org.openide.filesystems.FileStateInvalidException;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.util.ImageUtilities;
import org.openide.windows.CloneableTopComponent;


/**
 * Top component which displays html document.
 */
//@ConvertAsProperties(dtd = "-//org.purl.net.jh.nb.html//Html//EN", autostore = false)
public final class HtmlTopComponent extends CloneableTopComponent {
    private final static org.purl.jh.util.Logger log = org.purl.jh.util.Logger.getLogger(HtmlTopComponent.class);
    
    /** path to the icon used by the component and its open action */
    static final String ICON_PATH = "org/purl/net/jh/nb/html/html-file-icon.png";
    private static final String PREFERRED_ID = "HtmlTopComponent";

    public HtmlTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(HtmlTopComponent.class, "CTL_HtmlTopComponent"));
        setToolTipText(NbBundle.getMessage(HtmlTopComponent.class, "HINT_HtmlTopComponent"));
        setIcon(ImageUtilities.loadImage(ICON_PATH, true));

    }

   public HtmlTopComponent(HtmlDataObject aData) {
        this();
        try {
            aData.getDoc().setBase(aData.getPrimaryEntry().getFile().getURL());
        } catch (FileStateInvalidException ex) {
            log.warning("Cannot obtain Html's base url, do=%s",aData);
        }
        
        this.jHtmlPane1.setEditorKit(aData.getKit());
        this.jHtmlPane1.setDocument(aData.getDoc());
        
//        Font font = jHtmlPane1.getFont();
//        String bodyRule = "body { font-family: " + font.getFamily() + "; " + "font-size: " + (font.getSize()+5) + "pt; }";
//        
//        ((HTMLDocument)jHtmlPane1.getDocument()).getStyleSheet().addRule(bodyRule);        
//        System.out.println("XXXXXXXXXXXXXXXAAAAAAAAAA111");
//        int fontSize = jEditorPane1.getFont().getSize();
//        Font font = new Font(jEditorPane1.getFont().getFontName(), jEditorPane1.getFont().getStyle(), fontSize+10);
//        setJTextPaneFont(jEditorPane1,font);    
    }

   /**
    * 
     * Utility method for setting the font and color of a JTextPane. The
     * result is roughly equivalent to calling setFont(...) and
     * setForeground(...) on an AWT TextArea.
     */
    public static void setJTextPaneFont(JTextPane jtp, Font font) {
        // Start with the current input attributes for the JTextPane. This
        // should ensure that we do not wipe out any existing attributes
        // (such as alignment or other paragraph attributes) currently
        // set on the text area.
        MutableAttributeSet attrs = jtp.getInputAttributes();

        // Set the font family, size, and style, based on properties of
        // the Font object. Note that JTextPane supports a number of
        // character attributes beyond those supported by the Font class.
        // For example, underline, strike-through, super- and sub-script.
//        StyleConstants.setFontFamily(attrs, font.getFamily());
        StyleConstants.setFontSize(attrs, font.getSize());
//        StyleConstants.setItalic(attrs, (font.getStyle() & Font.ITALIC) != 0);
//        StyleConstants.setBold(attrs, (font.getStyle() & Font.BOLD) != 0);

        // Set the font color
        //StyleConstants.setForeground(attrs, c);

        // Retrieve the pane's document object
        StyledDocument doc = jtp.getStyledDocument();

        // Replace the style for the entire document. We exceed the length
        // of the document by 1 so that text entered at the end of the
        // document uses the attributes.
        doc.setCharacterAttributes(0, doc.getLength() + 1, attrs, false);
    }   

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jHtmlPane1 = new org.purl.net.jh.nb.html.JHtmlPane();

        jScrollPane1.setViewportView(jHtmlPane1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private org.purl.net.jh.nb.html.JHtmlPane jHtmlPane1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables


    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_NEVER;
    }

    @Override
    public void componentOpened() {
        // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
        // TODO add custom code on component closing
    }

//    void writeProperties(java.util.Properties p) {
//        // better to version settings since initial version as advocated at
//        // http://wiki.apidesign.org/wiki/PropertyFiles
//        p.setProperty("version", "1.0");
//        // TODO store your settings
//    }
//
//    Object readProperties(java.util.Properties p) {
//        String version = p.getProperty("version");
//        // TODO read your settings according to their version
//        return this;
//    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }
}
